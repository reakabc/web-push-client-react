{"version":3,"sources":["subscribe-push.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["subscribePushNotification","a","navigator","console","error","serviceWorker","ready","registration","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlB64ToUint8Array","process","subscription","fetch","mode","method","body","JSON","stringify","headers","base64String","base64","repeat","length","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","App","className","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","then","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"qOAAaA,EAAyB,uCAAG,8BAAAC,EAAA,4DAG/B,kBAAmBC,WACvBC,QAAQC,MAAM,oCAJqB,SAOVF,UAAUG,cAAcC,MAPd,cAO/BC,EAP+B,gBAUVA,EAAaC,YAAYC,UAAU,CAC5DC,iBAAiB,EACjBC,qBAAsBC,EAAmBC,6FAZN,cAU/BC,EAV+B,iBAgB/BC,MAAM,GAAD,OAAIF,yBAAJ,cAAqD,CAC9DG,KAAM,OACNC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACP,eAAgB,sBArBiB,4CAAH,qDA4B9BT,EAAqB,SAAAU,GAKzB,IAJA,IACMC,GAAUD,EADA,IAAIE,QAAQ,EAAKF,EAAaG,OAAS,GAAM,IACrBC,QAAQ,MAAO,KAAKA,QAAQ,KAAM,KACpEC,EAAUC,KAAKL,GACfM,EAAc,IAAIC,WAAWH,EAAQF,QAClCM,EAAI,EAAGA,EAAIJ,EAAQF,SAAUM,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,GAEtC,OAAOF,G,OCvBII,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,wBAAQC,QAAS,kBAAMnC,KAAvB,8DCKFoC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9B1C,UAAUG,cACPwC,SAASF,GACTG,MAAK,SAACvC,GACLA,EAAawC,cAAgB,WAC3B,IAAMC,EAAmBzC,EAAa0C,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfjD,UAAUG,cAAc+C,YAI1BjD,QAAQkD,IACN,+GAKET,GAAUA,EAAOU,UACnBV,EAAOU,SAAS/C,KAMlBJ,QAAQkD,IAAI,sCAGRT,GAAUA,EAAOW,WACnBX,EAAOW,UAAUhD,WAO5BiD,OAAM,SAACpD,GACND,QAAQC,MAAM,4CAA6CA,MC9FjE,IAYeqD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkBzB,GACvB,GAA6C,kBAAmB1C,UAAW,CAGzE,GADkB,IAAIoE,IAAIzD,GAAwByB,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM9B,GAAN,sBAEPuB,IAgEV,SAAiCO,EAAOC,GAEtC7B,MAAM4B,EAAO,CACXtB,QAAS,CAAE,iBAAkB,YAE5ByB,MAAK,SAAC4B,GAEL,IAAMC,EAAcD,EAASrD,QAAQuD,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5E,UAAUG,cAAcC,MAAMwC,MAAK,SAACvC,GAClCA,EAAawE,aAAajC,MAAK,WAC7BR,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLrD,QAAQkD,IAAI,oEAtFV4B,CAAwBtC,EAAOC,GAI/B1C,UAAUG,cAAcC,MAAMwC,MAAK,WACjC3C,QAAQkD,IACN,+GAMJX,EAAgBC,EAAOC,OE/B/BsC,GAKAzB,M","file":"static/js/main.70ddf3da.chunk.js","sourcesContent":["export const subscribePushNotification = async () => {\r\n\r\n  //check for service worker in browser\r\n    if (!('serviceWorker' in navigator )) {\r\n      console.error(\"Service Worker is not available!\");\r\n    };\r\n\r\n    const registration = await navigator.serviceWorker.ready;\r\n  \r\n    // Subscribe to push notifications\r\n    const subscription = await registration.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: urlB64ToUint8Array(process.env.REACT_APP_VAPID_PUBLIC_KEY),\r\n    });\r\n\r\n    //send subscription to server\r\n    await fetch(`${process.env.REACT_APP_SERVER_DOMAIN}/subscribe`, {\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      body: JSON.stringify(subscription),\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    });\r\n\r\n  };\r\n\r\n  \r\n  const urlB64ToUint8Array = base64String => {\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\r\n    const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/')\r\n    const rawData = atob(base64)\r\n    const outputArray = new Uint8Array(rawData.length)\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i)\r\n    }\r\n    return outputArray\r\n  }\r\n","import './App.css';\nimport {subscribePushNotification} from './subscribe-push'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={() => subscribePushNotification()}>Send Push Subscription and Get Notification</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}